import { Router } from "https://deno.land/x/oak/mod.ts";
import { getDb } from "../helpers/db_client.ts";
import { ObjectId } from "https://deno.land/x/mongo@v0.32.0/mod.ts";

// todo model
import { Todo } from "../models/todo.ts";

// creating instance of the router
const router = new Router();

router.get("/todos", async (ctx: any) => {
  const todos = await getDb().collection("todos").find().toArray();
  const transformedTodos = todos.map(
    (todo: { _id: ObjectId; text: string }) => {
      return {
        id: todo._id.$oid,
        text: todo.text,
      };
    }
  );
  ctx.response.body = { todos: transformedTodos };
});

router.post(
  "/todos",
  async ({ request, response }: { request: any; response: any }) => {
    const data = await request.body.json();
    const todo: Todo = {
      // id will be auto generated by mongoDB
      text: data.text,
    };
    const id = await getDb().collection("todos").insertOne(todo);
    todo.id = id.$oid;

    response.body = { message: "created Todo", todo: todo };
  }
);

router.put(
  "/todos/:todoid",
  async ({
    request,
    response,
    params,
  }: {
    request: any;
    response: any;
    params: any;
  }) => {
    console.log(params);

    const tid = params.todoid!;
    const data = await request.body.json();
    console.log(tid);

    await getDb()
      .collection("todos")
      .updateOne({ _id: { $oid: tid } }, { $set: { text: data.text } });

    const updatedTodo = await getDb()
      .collection("todos")
      .findOne({ _id: { $oid: tid } });

    response.body = { id: tid, text: updatedTodo.text }; // Include id property in the response
  }
);

router.delete("/todos/:id", async (ctx: any) => {
  const tid = await ctx.params.id!;

  await getDb()
    .collection("todos")
    .deleteOne({ _id: { $oid: tid } });

  ctx.response.body = { message: "Todo Delted" };
});

export default router;
